datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
  theme    = "dark"
}

/// 창고
model Warehouse {
  warehouse_id Int      @id @default(autoincrement())
  name         String
  location     String
  created_at   DateTime @default(now())

  inventory Inventory[]
}

/// 재고
model Inventory {
  inventory_id Int             @id @default(autoincrement())
  warehouse_id Int
  item_id      String
  quantity     Int
  safety_stock Int
  store_date   DateTime
  expiry_date  DateTime
  status       InventoryStatus
  updated_at   DateTime        @updatedAt

  warehouse Warehouse @relation(fields: [warehouse_id], references: [warehouse_id])
  item      Item      @relation(fields: [item_id], references: [item_id])
}

/// 품목
model Item {
  id          Int      @id @default(autoincrement())
  item_id     String   @unique
  category_id Int
  vendor_id   Int
  name        String
  unit_id     Int
  unit_price  Int
  expiry_date DateTime
  created_at  DateTime @default(now())

  inventory    Inventory[]
  orderRequest OrderRequest[]
  vendorOrders VendorOrder[]
  lotTraces    LotTrace[]

  category Category @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  vendor   Vendor   @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)
  unit     Unit     @relation(fields: [unit_id], references: [unit_id], onDelete: Cascade)
}

/// 단위(Unit)
model Unit {
  unit_id Int    @id @default(autoincrement())
  code    String @unique
  name    String

  items Item[]
}

/// 지점 발주
model OrderRequest {
  order_id   Int         @id @default(autoincrement())
  branch_id  Int
  item_id    String
  quantity   Int
  status     OrderStatus
  created_at DateTime    @default(now())

  branch   Branch    @relation(fields: [branch_id], references: [branch_id])
  item     Item      @relation(fields: [item_id], references: [item_id])
  shipment Shipment?
}

/// 거래처 발주
model VendorOrder {
  vendor_order_id Int         @id @default(autoincrement())
  vendor_id       Int
  item_id         String
  quantity        Int
  status          OrderStatus
  created_at      DateTime    @default(now())

  vendor Vendor @relation(fields: [vendor_id], references: [vendor_id])
  item   Item   @relation(fields: [item_id], references: [item_id])
}

/// 출하
model Shipment {
  shipment_id     Int            @id @default(autoincrement())
  order_id        Int            @unique
  shipped_date    DateTime
  delivery_status DeliveryStatus

  orderRequest OrderRequest @relation(fields: [order_id], references: [order_id])
  lotTraces    LotTrace[]
  delivery     Delivery?
}

/// LOT 추적
model LotTrace {
  lot_id           Int      @id @default(autoincrement())
  item_id          String
  manufacture_date DateTime
  expiry_date      DateTime
  shipment_id      Int?

  item     Item      @relation(fields: [item_id], references: [item_id])
  shipment Shipment? @relation(fields: [shipment_id], references: [shipment_id])
}

/// 카테고리
model Category {
  category_id   Int           @id @default(autoincrement())
  group         CategoryGroup
  category_name String
  created_at    DateTime      @default(now())

  items Item[]
}

/// 지점
model Branch {
  branch_id  Int        @id @default(autoincrement())
  name       String
  type       BranchType
  location   String
  created_at DateTime   @default(now())

  orderRequest  OrderRequest[]
  sales         BranchSales[]
  hygieneChecks BranchHygiene[]
}

/// 지점 매출
model BranchSales {
  sales_id  Int      @id @default(autoincrement())
  branch_id Int
  date      DateTime
  revenue   Decimal
  profit    Decimal

  branch Branch @relation(fields: [branch_id], references: [branch_id])
}

/// 위생 점검
model BranchHygiene {
  hygiene_id      Int          @id @default(autoincrement())
  branch_id       Int
  grade           HygieneGrade
  inspector_name  String
  inspection_date DateTime

  branch Branch @relation(fields: [branch_id], references: [branch_id])
}

/// 거래처
model Vendor {
  vendor_id Int    @id @default(autoincrement())
  name      String
  manager   String
  contact   String
  address   String

  items        Item[] // ✅ 추가됨
  vendorOrders VendorOrder[]
  payments     VendorPayment[]
}

/// 거래처 결제
model VendorPayment {
  payment_id   Int           @id @default(autoincrement())
  vendor_id    Int
  amount       Decimal
  payment_date DateTime
  status       PaymentStatus

  vendor Vendor @relation(fields: [vendor_id], references: [vendor_id])
}

/// 배송
model Delivery {
  delivery_id      Int            @id @default(autoincrement())
  shipment_id      Int            @unique
  delivery_company String
  tracking_number  String
  delivered_date   DateTime
  status           DeliveryStatus

  shipment Shipment @relation(fields: [shipment_id], references: [shipment_id])
}

//
// ENUMS
//
enum InventoryStatus {
  NORMAL
  EXPIRING
  DISCARDED
}

enum OrderStatus {
  PENDING
  APPROVED
  SHIPPING
  COMPLETED
}

enum DeliveryStatus {
  PENDING
  SHIPPING
  COMPLETED
}

enum HygieneGrade {
  A
  B
  C
}

enum BranchType {
  DIRECT
  FRANCHISE
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum CategoryGroup {
  MEAT
  SEAFOOD
  NOODLES
  VEGETABLES
  DAIRY
  EGGS
  PROCESSED
  SAUCES
  SEASONINGS
  SOUPS
  BROTH_BASEmy
}
